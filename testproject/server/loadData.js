process.binding('http_parser').HTTPParser = require('http-parser-js').HTTPParser;

const http = require('http');

const express = require("express");
const app = express();
const cors = require("cors");
const pool = require("./db"); 


const fetch = require("node-fetch");
const { json } = require('express');

app.use(cors());
app.use(express.json()); 


app.post("/artists", async (req, res) => {
    try {
        const { artistDisplayName, artistNationality, artistDisplayBio, artistBeginDate, artistEndDate, artistGender, artistWikidata_URL } = req.body;
        const newArtistEntry = await pool.query("INSERT INTO artists (display_name, nationality, display_bio, birth_year, death_year, gender, artist_wikidata_url) VALUES($1, $2, $3, $4, $5, $6, $7) RETURNING *", [artistDisplayName, artistNationality, artistDisplayBio, artistBeginDate, artistEndDate, artistGender, artistWikidata_URL]);
        res.json(newArtistEntry.rows[0]);
    } catch (err) {
        console.error(err.message);
    }
})


app.post("/pieces", async (req, res) => {
    try {            
        const { objectID, title, artistDisplayName, artistNationality, primaryImage, primaryImageSmall, additionalImages, objectName, medium, culture, city, country, objectDate, objectEndDate, department, GalleryNumber, accessionYear, objectURL, tags, objectWikidata_URL } = req.body;
        const newPieceEntry = await pool.query("INSERT INTO pieces (objectid, title, artist_display_name, artist_nationality, primary_image, primary_image_small, additional_images, objectname, medium, culture, city, country, object_date, object_end_date, department, gallery_number, accession_year, object_url, tags, object_wikidata_url) VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20) RETURNING *", [objectID, title, artistDisplayName, artistNationality, primaryImage, primaryImageSmall, additionalImages, objectName, medium, culture, city, country, objectDate, objectEndDate, department, GalleryNumber, accessionYear, objectURL, JSON.stringify(tags), objectWikidata_URL]);
        res.json(newPieceEntry.rows[0]);
    } catch (err) {
        console.error(err.message);
    }
})

const objectsEndpoint = "https://collectionapi.metmuseum.org/public/collection/v1/objects";

const storeArtistData = async (objectID) => {
    const objectEndpoint = `${objectsEndpoint}/${objectID}`;
    const response = await fetch(objectEndpoint);
    let body = await response.json();
    // console.log(body);
    fetch('http://localhost:5000/artists', {
    method: 'post',
    body:    JSON.stringify(body),
    headers: { 'Content-Type': 'application/json' },
    })
    .then(res => res.json())
    .then(storePieceData(objectID));
}

const storePieceData = async (objectID) => {
    const objectEndpoint = `${objectsEndpoint}/${objectID}`;
    const response = await fetch(objectEndpoint);
    let body = await response.json();
    // console.log(body);
    fetch('http://localhost:5000/pieces', {
    method: 'post',
    body:    JSON.stringify(body),
    headers: { 'Content-Type': 'application/json' },
    })
    .then(res => res.json())
}

const arrayEndpoint = "https://collectionapi.metmuseum.org/public/collection/v1/search?isHighlight=true&hasImages=true&q=painting";


let objectIDsArray = [466105,451023,453336,451725,453183,453351,451268,456949,544502,250939,435641,436573,437769,438814,247009,437326,437971,437609,437455,435853,436323,437891,435851,436244,247008,437447,439933,437900,437329,437826,437549,436792,438754,544442,701989,437175,436964,437879,436840,438605,436658,436918,437423,437869,679844,436106,436575,435728,436105,438815,436440,435802,634108,437532,436603,435621,436838,20517,437056,37801,327830,459110,11383,436944,435962,437654,435702,436545,437490,437658,435882,10813,11797,11133,708024,459007,437053,435739,435809,459086,11981,459052,764095,437344,459112,12828,436504,436121,437881,435908,12600,458994,436101,11834,11227,10080,435826,459088,437926,437835,10497,437394,459087,11050,437854,435984,438820,436002,459082,459016,12822,12842,437097,10159,11207,11734,11605,458978,13171,438817,12667,13052,436579,10843,16687,437790,437153,459093,459080,459136,459092,626692,10554,10819,694642,458967,10482,10811,11263,11764,11417,17897,18354,21126,11269,10175,437397,14931,10186,11707,435844,438816,20768,435817,20888,459046,10464,10501,10207,14472,11287,458977,436622,10793,10786,436532,10154,768547,438818,10174,11325,11311,20129,10946,12674,16584,10586,764091,11396,11307,436528,435876,436253,458971,11055,13211,458961,438417,435839,459131,11619,437675,813585,635401,436819,435896,437749,10469,10527,12670,765285,459090,436037,770850,459106,437487,459084,438822,505722,10522,12602,435868,437299,459083,436839,13344,13346,13345,11145,13223,813594,437261,438821,719486,440723,459072,436896,458956,10531,13315,631985,17447,10049,10065,10481,10827,10830,10997,11040,11737,698529,10499,11160,752047,441769,436851,40055,827660,451270,436966,250945,437372,436516,470600,11234,437283,470308,436892,435600,459045,436282,547951,544326,459055,543937,544776,544320,195456,21209,459028,459027,436535,11116,436947,471904,437430,11122,459123,435888,11130,459062,12702,10465,459061,11080,436095,438112,543903,199674,544720,472387,544453,458998,544319,544702,9317,548343,544853,544060,544056,39936,313240,247017,747199,544039,65576,42716,4591,15026,326243,544752,451373,7874,14521,202996,324917,548338,455304,459246,310652,20414,544683,451804,193344,470603,548212,15588,543901,543899,696866,10956,543864,548344,544740,464607,544524,209063,547257,544210,545281,205485,39915,313780,37942,451490,470304,39666,471061,465991,205526,662161,662163,446860,36131,470311,466580,544450,448671,470312,1815,470310,469857,61429,503517,451909,469856,451715,473047,503940,464156,473008,469866,469887,311294,451717,444897,453576,466084,459038,459037,467594,39901,37788,478211,502040,503043,472155,254649,469959,463795,544214,17139,544501,455082,544919,470313,473007,501788,451444,48948,503625,459249,36029,44696,40081,49156,453312,39668,59669,503678,464596,202115,476711,452037,548264,327066,502761,209104,465966,475513,503271,459248,471884,453054,45428,448294,335663,452102,464483,13751,334002,451995,311950,4285,769306,501767,5505,44858,22876,19763,446595,452160,446892,455059,452112,452111,24907,547802,459190,447086,459189,453683,454013,248499,250951,500782,334650,454011,447572,452845,81132,22634,359882,247964,446560,446567,503939,681349,333813,448938,453317,464142,257511,5630,337498,483438,335240,446563,337702,254896,459254,251935,10818,206976,451405,317618,459188,459192,266332,454015,204804,24693,11900,459244,503503,3395,253566,501492,459210,446562,231667,11757,337172,544782,249222,38341,12544,271885,447510,459245,751516,337699,717563,37145,459191,333990,451286,25111,446642,310073,208816,317793,13907,205250,313386,309959,339751,785496,785466,11121,202718,253349,337491,337494,202192,337489,283626,12613,459208,459185,10983,11897,11907,229993,189164,459195,459205,10732,11268,459183,470315,11380,503932,547775,191259,11375,449457,1083,751509,751513,751510,751508,820215,359362,717564,751515,459213,448647,13390,466045,717547,271890,459236,336162,459235,459241,271963,337490,336489,282039,839174,12388,470309,337499,310364,310870,336327,79893,13245,3158,544227,237,544690,327497,20498,678732,254843,466070,459253,466182,503505,267087,265904,96434,337894,309427,309428,83605,354631,459207,267019,503046,324695,11985,459211,326655,13115,447071,193632,337496,309861,448183,505399,545113,39918,337497,313256,503613,820544,463188,503818,503530,501762,236688,451802,45432,65397,204533,467746,11388,12004,198715,13878,470306,318345,312602,199708,194432,337075,446285,325562,254923,451402,824771,39738,39707,324687,459186,459206,11096,547900,13755,451092,247020,547689,485518,450409,323178,202141,12953,16577,450509,447000,453243,469960,444812,191803,337844,336046,451400,250551,192716,255154,446297,453053,310542,256846,252948,337625,451042,248902,252451,16863,477499,17053,760942,444378,446011,436173,255949,337088,251532,207032,81558,452100,466198,466191,331619,468233,247916,44918,469858,206990,253351,253370,464377,219394,446999,254587,337500,255275,22275,451332,253348,39730,229770,464125,333915,252973,255973,337105,248904,468106,23939,470305,467730,37614,453227];

const grabObjectIDs = async () => {
    try {
        // const response = await fetch(arrayEndpoint);
        // const body = await response.json();
        // let objectIDsArray = body.objectIDs || [];
        objectIDsArray.forEach(objectID => {
            storeArtistData(objectID);
        })
        
    } catch (err) {
        console.log(err.message);
    }
   

}

// function I ran to populate the psql database with data from the API
// grabObjectIDs();


// app.listen(5000, () => {
//     console.log("server has started on port 5000, we did it!");
// })